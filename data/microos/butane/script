#!/bin/bash
# combustion: network prepare
# 
# Simple openQA combustion script used for sle-micro or Minimal-VM start from 15-SP6 and their opensuse counterparts
# due to known bug boo#1157133, the script is intended to be used only on x86_64
# 
# Test Objects:
#   1) set localization and timezone
#   2) create new fs in the test drive
#   3) set root password
#   4) create test users
#   5) set systemd mount for test partition
#   6) create test oneshot systemd service that creates a file
#   7) enable sshd
#   8) set test hostname 
#   9) test networking
#
set -euxo pipefail

# look for a drive that has no partition table or other information that blkid would return
detect_free_drive() {
    declare -a drives
    drives=( $(ls /sys/block/) )

    for d in ${drives[@]}; do
        # 64bit worker boots the image with cd-rom (sr0) device
        # vmware adds floppy drive
        # microos has loop devices present
        # skip any of this device in case it is detected
        [[ "$d" =~ ^(sr|fd|loop)[0-9]$ ]] && continue
        blkid /dev/"$d" &> /dev/null
        if [[ "$?" -eq 2 ]]; then
            printf "%s" "/dev/$d"
            return 0
        fi
    done
}

create_fs() {
    local DRIVE=$(detect_free_drive)
    test -n "$DRIVE" || exit 2

    local PART="${DRIVE}1"

    # create partition and filesystem on additional drive
    echo "label: gpt" | sfdisk "$DRIVE"
    echo "name=testing_part" | sfdisk "$DRIVE" -N1

    # label new partition for testing and create labeled ext4
    mkfs.ext4 -L home "$PART"

    # mount new partition
    mount -t ext4 "$PART" /home

    # Tell the kernel about the new layout
    partx -u "$DRIVE"

    # DEBUG
    blkid
    lsblk
}

systemd_mount() {

cat << EOF > /etc/systemd/system/home.mount
[Unit]
Before=local-fs.target
Requires=systemd-fsck@dev-disk-by\x2dpartlabel-testing_part.service
After=systemd-fsck@dev-disk-by\x2dpartlabel-testing_part.service

[Mount]
Where=/home
What=/dev/disk/by-partlabel/testing_part
Type=ext4

[Install]
RequiredBy=local-fs.target
EOF

}

test_prepare() {
    echo "combustion: test_prepare function ran OK" > /dev/kmsg
}

fde_in_service() {
cat > /opt/reencrypt.sh <<'EOF'
#!/bin/bash
set -eux

# define fde data
luks_keyfile=/root/.root.keyfile
luks_dev=$(blkid -t TYPE=crypto_LUKS --output=device)
newpass=$(mktemp /tmp/fde.XXXXXX)
echo -n bm90czNjcjN0Cg== | base64 -d > "${newpass}"

if [ -f /run/.kiwi_reencrypt.keyfile ]; then
    oldpass=/run/.kiwi_reencrypt.keyfile
else
    oldpass=$(mktemp /tmp/fde.XXXXXX)
    echo -n "1234" > "${oldpass}"
fi

sed -i "s,${luks_keyfile},/.virtual-root.key,g" /etc/crypttab
sed -i "s,${luks_keyfile},/.virtual-root.key,g" /etc/dracut.conf.d/99-luks-boot.conf
cryptsetup --key-file "${oldpass}" luksChangeKey --pbkdf pbkdf2 "${luks_dev}" "${newpass}"
cryptsetup reencrypt --key-file "${newpass}" "${luks_dev}"
fdectl --passfile "${newpass}" regenerate-key
systemctl enable fde-tpm-enroll.service
transactional-update initrd grub.cfg
rm -f "${newpass}" "${oldpass}" "${luks_keyfile}"
systemctl --message="Combustion triggered FDE" reboot
EOF

chmod 755 /opt/reencrypt.sh

cat > /etc/systemd/system/reencrypt.service <<'EOF'
[Unit]
Description=Run FDE reencrypt configured by combustion

ConditionPathExists=/root/.root.keyfile

After=local-fs.target systemd-firstboot.service basic.target
Before=getty.target network.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/opt/reencrypt.sh

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable reencrypt.service
}

if [ "${1-}" = "--prepare" ]; then
    test_prepare

    if [ -c "/dev/tpm0" ] && command -v disk-encryption-tool &> /dev/null; then
        mkdir -p /run/credstore
        echo "force" > /run/credstore/disk-encryption-tool-dracut.encrypt
        echo "cr_root /dev/vda3" >> /run/credstore/disk-encryption-tool-dracut.partitions
    fi

    exit 0
fi

# Redirect output to the console
exec > >(exec tee -a /dev/console) 2>&1

if command -v mkfs.ext4 &> /dev/null; then
    create_fs
    systemd_mount
else
    mount /home
fi

if [ -c "/dev/tpm0" ] && command -v fdectl &> /dev/null; then
    fde_in_service
fi

if [ -c "/dev/tpm0" ] && command -v disk-encryption-tool &> /dev/null; then
    systemd-machine-id-setup
    [ -z "${TRANSACTIONAL_UPDATE+x}" ] || mount /var
    mkdir -p /etc/credstore.encrypted
    credential="$(mktemp disk-encryption-tool.XXXXXXXXXX)"
    # Enroll recovery key
    echo "1" > "$credential"
    systemd-creds encrypt --name=sdbootutil-enroll.rk "$credential" /etc/credstore.encrypted/sdbootutil-enroll.rk
    # Enroll TPM2
    echo "1" > "$credential"
    systemd-creds encrypt --name=sdbootutil-enroll.tpm2 "$credential" /etc/credstore.encrypted/sdbootutil-enroll.tpm2
    shred -u "$credential"
    # hack as heck, skip jeos-firstboot
    # https://github.com/openSUSE/jeos-firstboot/issues/128
    rm -f /sysroot/var/lib/YaST2/reconfig_system
    # Umount back /var to not confuse tukit later
    [ -z "${TRANSACTIONAL_UPDATE+x}" ] || umount /var
fi

### set locale, keyboard and timezone
# exception: sle-micro comes with symlink /etc/localtime, thus systemd-firstboot fails
# bsc#1215618 - systemd-firstboot --force fails to replace an existing /etc/localtime symlink
rm -f /etc/localtime
systemd-firstboot --force --timezone=UTC --locale=en_US.UTF-8 --keymap=us
echo 'FONT=eurlatgr.psfu' >> /etc/vconsole.conf

#
### users and groups
# groups
groupadd --gid 2002 geekos

# users
echo 'root:$6$eEm2HpuzI7dfE4i7$dbYiTRLhrqVvwryR7zmMEcnrp13IqZ3mzLbsx9EeHAX7849PibGVgX5vdPuaeYYIO7hVfcboI9/JDpGiDZhHf/' | chpasswd -e
useradd --no-create-home --uid 2002 --gid geekos --groups users HomelessTester
useradd --create-home --uid 1001 --comment "Bernhard M. Wiedemann" --no-user-group --gid users bernhard
echo 'bernhard:$6$eEm2HpuzI7dfE4i7$dbYiTRLhrqVvwryR7zmMEcnrp13IqZ3mzLbsx9EeHAX7849PibGVgX5vdPuaeYYIO7hVfcboI9/JDpGiDZhHf/' | chpasswd -e

#
### files and directories
#
echo "cucaracha" > /etc/hostname
mkdir --mode=0755 /home/bernhard/testdir
chown bernhard:users /home/bernhard/testdir
echo "Hello there!" > /home/bernhard/testdir/hello
chown bernhard:users /home/bernhard/testdir/hello
chmod 0600 /home/bernhard/testdir/hello

#
### systemd units
#
cat << EOF > /etc/systemd/system/create_test_file.service
[Unit]
Description=Just a Test!
[Service]
Type=oneshot
RemainAfterExit=no
ExecStart=/usr/bin/touch /var/log/flagfile
[Install]
WantedBy=multi-user.target
EOF

systemctl enable sshd.service
systemctl enable create_test_file.service

#
### Networking
#
# configure interface for minimal-vm based on sle
IF=$(find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n' | head -n1)
IF_CFG="/etc/sysconfig/network/ifcfg-$IF"
if command -v wicked &> /dev/null && ! grep -q 'dhcp' "$IF_CFG" &> /dev/null; then
    echo -e "BOOTPROTO=dhcp\nSTARTMODE=auto" > "$IF_CFG"
fi

# leave a marker that combustion configure the system
echo Combustion was here > /usr/share/combustion-welcome
curl conncheck.opensuse.org

# close outputs and wait for tee to finish
exec 1>&- 2>&-; wait;
